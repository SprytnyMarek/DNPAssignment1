@page "/ViewAdults"
@using DNPAssignment.Data
@using Microsoft.AspNetCore.Mvc.Filters
@using Models
@inject InterfaceGetAdults GetAdults
@inject NavigationManager NavigationManager


<h3>ViewAdults</h3>
<p>
    Filter by User name:  <input type="text" @oninput="@((arg) => Filter(arg))" style="width:150px"/>
</p>

@if (adults == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adults.Any())
{
    <p>
        <em>No Person items exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>First name</th>
            <th>Last name</th>
            <th>Hair color</th>
            <th>Eye coloe</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in peopleToShow)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>
                    <button @onclick="@(() => RemovePerson(item.Id))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}



@code 
{

    private IList<Person> adults;
    private IList<Person> peopleToShow;

    private void Filter(ChangeEventArgs changeEventArgs)
    {
        string? filterByName = "";
        try
        {
            filterByName = changeEventArgs.Value.ToString();
        }
        catch (Exception e)
        {
        }
        if (filterByName != "")
        {
            peopleToShow = adults.Where(t => t.FirstName == filterByName).ToList();
        }
        else
        {
            peopleToShow = adults;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        adults = GetAdults.GetAllAdults();
        peopleToShow = adults;

        base.OnInitialized();
        var user = (await AuthStat).User;
        if (!user.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo($"/Login");
        }
    }
    
    private void RemovePerson(int personId)
    {
        Person personToRemove = adults.First(t => t.Id == personId);
        GetAdults.RemovePerson(personId);
        adults.Remove(personToRemove);
    }
    
    
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }


    }

}